Git notes:

[How we should maybe use Git at S24:]
(To discuss with team!)
1. We can obviously have whatever local branches we want..however:
2. I think we should agree on some standard branches:

   On a team members machine:
   - live: This should be the same as what's on the live website/whatever.. maybe make this readonly if possible! Pull from /var/www/somesite on scaramanga
   - master: The new set of changes we are about to implement - Push/pull to github
   - [bigfeature1]: Some big feature we're working on, call it something sensible - Push/pull to github
   - [bigfeature2]: Some big feature we're working on, call it something sensible - Push/pull to github
   - [bigfeature3]: Some big feature we're working on, call it something sensible - Push/pull to github

   Deployment on Scaramanga:
   - Team checks master is ok on staging site
   - On scara: Create a mysql dump into current (live) branch
   - On scara: Display maintenance page?
   - On scara: Create new branch live-pre-merge-dd-mm-yy-hh-ss or whatever for safety
   - On scara: Pull master from github to local master branch (this step to prevent half updates being live on apache)
   - On scara: Apply database changes
   - On scara: Checkout (switch to) live, merge master. Done!
   - On scara: Remove maintenance page

   * Therefore with a clever script we can instantly 'roll back' the tree on scaramanga (easy) and run the db dump we took to un-do db changes.
     Not only that, we can easily go to any deployment point

1. Set up your username:
git config --global user.name "John Hunt"
git config --global user.email "johnrhunt@gmail.com"

2. Enable colours!
git config --global color.ui true

3. Watch out for:
- Github docs are wrong, there is no write with https (or at least I can't create a new branch on github with that protocol..) - use ssh, this is confirmed on stackoverflow.. I'm not 100% sure it's the case but certainly seemed to stop me a bit.
- If you don't want to apply a staged or un-staged change to the current branch you can just git stash and then git stash apply later on to the branch you do want.. don't get too muddled up though.. it's best to finish your work, do a commit and then change branch. Stashing is a bit of a temporary thing I think... [note: read up about stashing]
- !! When you clone a repo it doesn't appear to list all the branches but they are there..
http://stackoverflow.com/questions/67699/how-do-i-clone-all-remote-branches-with-git

This will make pushes on your current branch go to the same branch on remote (they do anyway but this makes it explicit):
git config --global push.default matching

4. Merging:
git merge experimental
- Merges experimental branch into current branch and does a commit, this is known as a merge commit.

5. Rebasing
- Rebase your local dev branch(es) to bring them up to speed with a remote branch or other branch without having a load of merge commits happening.. if you don't do this your branches will be full of merge commits. Rebasing is basically like merging normally but 'quieter', this use case is probably the safest.
http://www.jarrodspillers.com/2009/08/19/git-merge-vs-git-rebase-avoiding-rebase-hell/
- Don't rebase branches you have shared with another developer.

6. Pushing
- You'll push to whatever branch your currently on unless you specify the branch.. 

Funny stuff:
1. To set up an existing repo with existing files (eg empty repo with existing project on local macine):
   1. git init your sources
   2. set the remote and pull in changes (I think that's what I did..)

Creating new branches on remote repo:
http://www.mariopareja.com/blog/archive/2010/01/11/how-to-push-a-new-local-branch-to-a-remote.aspx

Note: when you git push origin it'll update all branches on origin that exist there

Beware: This looks worse than it is:

john@helium:/var/www/streetrage/public$ git checkout experimental
M       index.html
Switched to branch 'experimental'

But nothing has really changed as you haven't committed anything. If you change branches again without stashing/committing etc the un-committed changes will follow you around until you commit, stash or revert them.

error: You have local changes to 'GIT_NOTES.txt'; cannot switch branches. - Stash, commit or revert.
